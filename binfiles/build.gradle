plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.dokka' version '1.9.10'
}

group = project.rootProject.maven_group
version = project.rootProject.mod_version

kotlin {
    jvmToolchain(rootProject.jvm_version.toInteger())
    compilerOptions {
        verbose = true
        allWarningsAsErrors = true
    }
}

def targetJavaVersion = rootProject.jvm_version.toInteger()
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
    it.options.compilerArgs.add("-Werror")
}

dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${project.kotlin_coroutines_version}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${project.kotlin_version}")
}

test {

}

processResources {
    inputs.property "version", project.rootProject.version
    inputs.property "minecraft_version", project.rootProject.minecraft_version
    inputs.property "loader_version", project.rootProject.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.rootProject.version,
                "minecraft_version": project.rootProject.minecraft_version,
                "loader_version": project.rootProject.loader_version
    }
}

jar {
    archiveBaseName = "advancedfmk-binfiles"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    java.withSourcesJar()
    archiveClassifier = "sources"
}

task javadocJar(type: Jar) {
    dependsOn(javadoc)
    from("build/dokka/javadoc")
    archiveClassifier = "javadoc"
}

artifacts {
    archives sourcesJar, javadocJar
}

var publish = new Properties()
rootProject.file('.gradle/publish.cfg').withInputStream { publish.load(it) }

def ossrhUserName = publish.getProperty('ossrhUserName')
def ossrhPassword = publish.getProperty('ossrhPassword')
def signKey = new String(publish.getProperty('signing.key').decodeBase64())
def signPassword = publish.getProperty('signing.password')

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = 'advancedfmk-binfiles'
            version = version

            from components.kotlin
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'binfiles (Advanced Framework)'
                description = 'Util functions for Advanced Framework'
                url = 'http://github.com/PrimogemStudio/Advanced-Framework'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hackermdch'
                        name = 'hackermdch'
                    }


                    developer {
                        id = 'Jack253-png'
                        name = 'Coder 2'
                        email = 'guoxiuchen20170402@163.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/PrimogemStudio/Advanced-Framework.git'
                    developerConnection = 'scm:git:ssh://github.com/PrimogemStudio/Advanced-Framework.git'
                    url = 'https://github.com/PrimogemStudio/Advanced-Framework'
                }
            }
        }
    }

    repositories {
        maven {
            name = "LocalMaven"
            url = rootProject.layout.projectDirectory.dir("../maven")
        }

        maven {
            name = "MavenCentral"
            credentials {
                username = ossrhUserName
                password = ossrhPassword
            }
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        }
    }
}

signing {
    useInMemoryPgpKeys(signKey, signPassword)
    sign publishing.publications.maven
}