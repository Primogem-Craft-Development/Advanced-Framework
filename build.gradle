//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
    id 'fabric-loom' version '1.5.7'
}

allprojects {
    tasks.withType(Javadoc).all { enabled = false }
}

version = project.mod_version
group = project.maven_group

var f = file(".gradle/publish.cfg")
if (!f.exists()) {
    var fo = new FileWriter(f)
    fo.write("ossrhUserName=''\n" + "ossrhPassword=''\n" + "signing.key=MQ==\n" + "signing.password=''")
    fo.close()
}

loom {
    accessWidenerPath = file("src/main/resources/META-INF/aw.accesswidener")
}

repositories {
    mavenCentral() {
        content {
            includeGroup "io.github.primogemstudio"
        }
    }
    maven { url = 'https://raw.githubusercontent.com/kotlin-graphics/mary/master' }
    maven { url = 'https://www.jitpack.io' }
    maven {
        url = 'https://maven.aliyun.com/repository/central'
        content {
            excludeGroup "io.github.primogemstudio"
        }
    }
    maven {
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases/'
    }
    maven { url = 'https://maven.terraformersmc.com/releases/' }
    maven { url = 'https://maven.aliyun.com/repository/jcenter' }
    maven { url = 'https://maven.aliyun.com/repository/google' }
    maven { url = 'https://maven.aliyun.com/repository/public' }
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = 'https://maven.shedaniel.me' }
    mavenCentral()
}

dependencies {
    include(implementation(project(path: ':mmdrenderer', configuration: "namedElements"))).exclude(group: "net.fabricmc.fabric-api")
    include(implementation(project(path: ':uicompositor', configuration: "namedElements"))).exclude(group: "net.fabricmc.fabric-api")
    include(implementation(project(path: ':commonutils')))
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
    }

    modApi "net.fabricmc:fabric-loader:${project.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.5.2"

    modRuntimeOnly "com.terraformersmc:modmenu:7.2.2"
    modRuntimeOnly "maven.modrinth:iris:1.6.17+1.20.1"
    runtimeOnly "org.anarres:jcpp:1.+"
    runtimeOnly "io.github.douira:glsl-transformer:2.0.0-pre13"
    runtimeOnly "org.antlr:antlr4-runtime:4.11.1"

    include "org.jetbrains.kotlin:kotlin-stdlib:1.9.20"
    include "org.luaj:luaj-jse:3.0.1"
    include "org.ladysnake:satin:1.14.0"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
    it.options.listFiles = true
    it.options.verbose = true
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

kotlin {
    jvmToolchain(17)
    compilerOptions {
        verbose = true
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
