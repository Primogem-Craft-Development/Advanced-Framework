import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
}

allprojects {
    tasks.withType(Javadoc).configureEach { enabled = false }

    repositories {
        mavenCentral() {
            content {
                includeGroup "io.github.primogemstudio"
            }
        }
        maven { url = 'https://www.jitpack.io' }
        maven {
            url = 'https://maven.aliyun.com/repository/central'
            content {
                excludeGroup "io.github.primogemstudio"
            }
        }
        maven {
            url = 'https://api.modrinth.com/maven'
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            url = "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name = 'Ladysnake Mods'
            url = 'https://maven.ladysnake.org/releases/'
        }
        maven { url = 'https://maven.terraformersmc.com/releases/' }
        maven { url = 'https://maven.aliyun.com/repository/jcenter' }
        maven { url = 'https://maven.aliyun.com/repository/google' }
        maven { url = 'https://maven.aliyun.com/repository/public' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.shedaniel.me' }
        mavenCentral()
    }
}

version = project.mod_version
group = project.maven_group

var f = file(".gradle/publish.cfg")
if (!f.exists()) {
    var fo = new FileWriter(f)
    fo.write("ossrhUserName=''\n" + "ossrhPassword=''\n" + "signing.key=MQ==\n" + "signing.password=''")
    fo.close()
}

loom {
    accessWidenerPath = file("src/main/resources/META-INF/aw.accesswidener")
}

dependencies {
    include(implementation(project(path: ':mmdrenderer', configuration: "namedElements"))).exclude(group: "net.fabricmc.fabric-api")
    include(implementation(project(path: ':uicompositor', configuration: "namedElements"))).exclude(group: "net.fabricmc.fabric-api")
    include(implementation(project(path: ':fontengine', configuration: "namedElements"))).exclude(group: "net.fabricmc.fabric-api")
    include(implementation(project(path: ':neoui', configuration: "namedElements"))).exclude(group: "net.fabricmc.fabric-api")
    include(implementation(project(path: ':commonutils')))
    include(implementation(project(path: ':simulator')))
    include(implementation(project(path: ':binfiles')))
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
    }

    modApi "net.fabricmc:fabric-loader:${project.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${project.kotlin_coroutines_version}"
    include "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:${project.kotlin_coroutines_version}"
    implementation "org.apiguardian:apiguardian-api:${project.apiguardian_api_version}"

    modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modRuntimeOnly "maven.modrinth:fpsdisplay:${project.fpsdisplay_version}"
//    modRuntimeOnly "maven.modrinth:iris:${project.iris_version}"
    // runtimeOnly "org.anarres:jcpp:${project.jcpp_version}"
    // runtimeOnly "io.github.douira:glsl-transformer:${project.glsl_transformer_version}"
    include(implementation("org.antlr:antlr4-runtime:${project.antlr4_runtime_version}"))

    include "org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_version}"
    include "org.jetbrains.kotlin:kotlin-reflect:${project.kotlin_version}"
    include "org.ladysnake:satin:${project.satin_version}"
    include(implementation("org.fusesource.jansi:jansi:2.4.0"))
    include(implementation("org.jline:jline:3.18.0"))
    include(implementation("org.yaml:snakeyaml:${project.snakeyaml_version}"))

    testImplementation "org.jetbrains.kotlin:kotlin-test:${project.kotlin_version}"
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.2")

    include(implementation("org.lwjgl:lwjgl-harfbuzz:${project.lwjgl_version}"))
}

tasks.test {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

tasks.named("build").configure {
    it.mustRunAfter("clean")
}

tasks.register('rebuild') {
    group 'build'
    dependsOn 'clean'
    dependsOn 'build'
}

tasks.register('cleanLogs') {
    group 'fabric'
    if (Paths.get(rootDir.getAbsolutePath(), "run/logs").toFile().exists()) {
        Files.walkFileTree(Paths.get(rootDir.getAbsolutePath(), "run/logs"),
                new SimpleFileVisitor<Path>() {
                    FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                        Files.delete(file)
                        return FileVisitResult.CONTINUE
                    }

                    FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                        Files.delete(dir)
                        return FileVisitResult.CONTINUE
                    }
                })
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = project.jvm_version.toInteger()
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
    it.options.compilerArgs.add("-Werror")
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

kotlin {
    jvmToolchain(project.jvm_version.toInteger())
    compilerOptions {
        verbose = true
        allWarningsAsErrors = true
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
